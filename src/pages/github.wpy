/*
 * MIT License
 *
 * Copyright (c) 2017 Feng Yifei
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Revision History:
 *     Initial: 2017/08/09        Lin Hao
 */

<style lang="less">
  .content {
    padding-bottom: 1px;
  }
  .resp {
    margin: 0.5rem;
    padding: 0.5rem;
    background-color: #f6f8fa;
  }
  .tab {
    width: 100%;
    height: 2rem;
  }
  .tabContent {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 2rem;
  }
  .tabItem {
    height: 1.5rem;
    margin-top: 0.5rem;
    display: flex;
    justify-content: center;
  }
  .active_tabItem {
    border-bottom: 3px solid darkcyan;
  }
  .tabText {
    font-size: 0.9rem;
  }
  .active_tabText {
    color: darkcyan;
  }
  .networkFailContent {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f6f8fa;
  }
  .networkFail {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #f6f8fa;
  }
  .failText {
    color: #2c2c2c;
    margin: 6px 0;
  }
  .reloadText {
    color: #999999;
  }
</style>

<template>
  <view class="content">
    <view class="topBorder"></view>
    <view wx:if="{{status === 0}}">
      <view class="tab">
      <view class="tabContent">
        <view
          wx:for="{{tab}}"
          wx:key="{{index}}"
          id="{{index}}"
          @tap="onChoose">
            <view wx:if="{{currentTargetId === index}}" class="tabItem" style="border-bottom: 3px solid {{color[currentTargetId]}};">
              <text class="tabText" style="color: {{color[currentTargetId]}};">{{item}}</text>
            </view>
            <view wx:else class="tabItem">
              <text class="tabText">{{item}}</text>
            </view>
          </view>
        </view>
      </view>
      <view class="page">
        <repeat for="{{popular}}" key="index" index="index" item="item">
          <popular :message="item" :width="windowWidth" @childFn.user="onShowDetail" />
        </repeat>
      </view>
    </view>
    <view
      wx:else
      @tap="onTapToReload"
      class="networkFailContent"
      style="height: {{windowHeight}}px;">
      <view class="networkFail">
        <image
          src="../images/wifi.png"
          style="height: 2rem; width: 2rem;"></image>
        <text
          class="failText"
          style="font-size: 1rem;">{{networkFail}}</text>
        <text
          class="reloadText"
          style="font-size: 1rem;">{{tapToReload}}</text>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Popular from '../components/popular'
  import { listIssues } from '../libs/github'

  export default class GitHub extends wepy.page {
    data = {
      windowHeight: 0,
      windowWidth: 0,
      popular: [],
      networkFail: '网络请求失败',
      tapToReload: '请轻触屏幕重新加载',
      tab: ['招聘求职', '二手信息', '房屋租售', '寻人找物'],
      color: ['#375eab', '#f1e05a', '#b83998', '#ffac45'],
      label: 'qiuzhi',
      page: 1,
      status: 0,
      currentTargetId: 0
    }

    config = {
      navigationBarTitleText: '便民信息'
    }

    components = {
      popular: Popular
    }

    methods = {
      // 点击屏幕重新加载
      async onTapToReload() {
        let self = this

        wepy.showLoading({
          title: '正在加载...',
          mask: true
        })

        // 重新获取数据
        let data = await listIssues(self.label)

        self.popular = data[0]
        self.status = data[1]

        // 加载成功直接显示，失败则提示用户
        if (self.status === 0) {
          await wepy.hideLoading()
        } else {
          await wepy.hideLoading()
          await wepy.showToast({
            title: '加载失败!',
            mask: true,
            image: '../images/fail.png',
            duration: 1500
          })
        }

        this.$apply()
      },

      async onChoose(e) {
        const labels = ['qiuzhi', 'ershou', 'zushou', 'xunren']
        let self = this

        wepy.showLoading({
          title: '正在加载...',
          mask: true
        })

        let id = Number(e.currentTarget.id)

        self.label = self.tab[id]
        self.currentTargetId = id

        let data = await listIssues(labels[id])

        self.popular = data[0]
        self.status = data[1]

        // 加载成功直接显示，失败则提示用户
        if (self.status === 0) {
          await wepy.hideLoading()
        } else {
          await wepy.hideLoading()
          await wepy.showToast({
            title: '加载失败!',
            mask: true,
            image: '../images/fail.png',
            duration: 1500
          })
        }

        this.$apply()
      },

      onShowDetail(e) {
        let self = this
        try {
          wepy.setStorageSync('body', self.popular[e.source.$index].body)
          wepy.setStorageSync('title', self.popular[e.source.$index].title)
        } catch (e) {
        }

        // 跳转到详情页
        wepy.navigateTo({
          url: './detail'
        })
      }
    }

    async onLoad() {
      let self = this

      wepy.showLoading({
        title: '正在加载...',
        mask: true
      })

      // 获取可用屏幕宽高
      if (getCurrentPages().length === 1) {
        try {
          self.windowHeight = wepy.getStorageSync('windowHeight')
          self.windowWidth = wepy.getStorageSync('windowWidth')
        } catch (e) {}
      } else {
        wepy.getSystemInfo({
          success: function (res) {
            self.windowHeight = res.windowHeight
            self.windowWidth = res.windowWidth
          }
        })
      }

      let data = await listIssues(self.label)

      self.popular = data[0]
      self.status = data[1]

      if (self.status === 0) {
        await wepy.hideLoading()
      } else {
        await wepy.hideLoading()
        await wepy.showToast({
          title: '加载失败!',
          mask: true,
          image: '../images/fail.png',
          duration: 1500
        })
      }

      this.$apply()
    }
  }
</script>
